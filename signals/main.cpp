#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <iostream>

using namespace std;

void terminate (int signal)
{
   switch(signal)
   {
      case SIGABRT:
         cout << "(Signal Abort) Abnormal termination, such as is initiated by the abort function.\n";
         break;
      case SIGFPE:
	 cout << "(Signal Floating-Point Exception) Erroneous arithmetic operation, such as zero divide or an operation resulting in overflow (not necessarily with a floating-point operation).";
         break;
      case SIGILL:
         cout << "(Signal Illegal Instruction) Invalid function image, such as an illegal instruction. This is generally due to a corruption in the code or to an attempt to execute data.\n";
      case SIGINT:
         cout << "(Signal Interrupt) Interactive attention signal. Generally generated by the application user.\n";
      case SIGSEGV:
         cout << "(Signal Segmentation Violation) Invalid access to storage: When a program tries to read or write outside the memory it is allocated for it.\n";
      case SIGTERM:
         cout << "(Signal Terminate) Termination request sent to program.\n";
         break;
      default:
	 cout << "(Unknown signal) Terminating...\n";
   }
  exit(1);
}

int main()
{
   signal (SIGABRT, terminate);
   signal (SIGFPE,  terminate);
   signal (SIGILL,  terminate);
   signal (SIGINT,  terminate);
   signal (SIGSEGV, terminate);
   signal (SIGTERM, terminate);
   
   char* nullPtr;
   *nullPtr = 1;

   return 1;
}
